---
import CodeSnipet from "../../components/CodeSnipet.astro";

const pythonRegData = `
import pandas as pd
import numpy as np

# Dataset de juguete (Regresión)
np.random.seed(42)
size = np.random.randint(50, 200, 100)  # Tamaño en m²
age = np.random.randint(1, 30, 100)     # Antigüedad en años
price = 1000 * size - 500 * age + np.random.normal(0, 5000, 100)  # Precio en $

df_reg = pd.DataFrame({"size": size, "age": age, "price": price})

# Definición de predictores
X = df_reg[["size", "age"]]
# Definición de variable target
y = df_reg["price"]
`

const rRegData = `
library(dplyr)

# Dataset de juguete (Regresión)
set.seed(42)
size <- sample(50:200, 100, replace = TRUE)  # Tamaño en m²
age <- sample(1:30, 100, replace = TRUE)     # Antigüedad en años
price <- 1000 * size - 500 * age + rnorm(100, 0, 5000)  # Precio en $

df_reg <- data.frame(size, age, price)
`
---
<div id="lr" role="complementary" aria-labelledby="lr-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">Regresión Lineal</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-lr"
        ariaControlsPython="python-lr"
        pythonCode=`${pythonRegData} 

# REGRESIÓN LINEAL
from sklearn.linear_model import LinearRegression

# Ajuste de la regresión lineal
model = LinearRegression()
model.fit(X, y)
    `
        dataTabsTargetR="#r-lr"
        ariaControlsR="r-lr"
        rCode=`${rRegData} 
# Ajuste de la regresión lineal
model <- lm(price ~ ., data = df_reg)
`
    />
</div>
<div
    id="reg-poly"
    role="complementary"
    aria-labelledby="reg-poly-tab"
    class="hidden flex-1 ml-1 px-1"
>
    <h2 class="py-10 text-3xl">Regresión Polinómica</h2>

    <CodeSnipet
        dataTabsTargetPython="#python-reg-poly"
        ariaControlsPython="python-reg-poly"
        pythonCode=`${pythonRegData} 

# REGRESIÓN POLINÓMICA
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# Transformación de prdictores a polinomio
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

# Ajuste de la regresión polinómica
model = LinearRegression()
model.fit(X_poly, y)
    `
        dataTabsTargetR="#r-reg-poly"
        ariaControlsR="r-reg-poly"
        rCode=`${rRegData} 

# Ajuste de la regresión polinómica
model <- lm(price ~ poly(size + age, degree=2), data = df_reg)
`
    />
</div>
<div id="ridge" role="complementary" aria-labelledby="ridge-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">Regresión Ridge</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-ridge"
        ariaControlsPython="python-ridge"
        pythonCode=`${pythonRegData}

# REGRESIÓN RIDGE
from sklearn.linear_model import Ridge

# Ajuste de la regresión ridge
model = Ridge(alpha=1.0)
model.fit(X, y)
    `
        dataTabsTargetR="#r-ridge"
        ariaControlsR="r-ridge"
        rCode=`${rRegData}

# Definición de predictores
X <- df_reg %>% select(c(size, age))
# Definición de variable target
y <- df_reg %>% select(price)

# REGRESIÓN RIDGE
library(glmnet)

# Ajuste de la regresión ridge
model <- glmnet(X, y, alpha=0)
`
    />
</div>

<div id="lasso" role="complementary" aria-labelledby="lasso-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">Regresión Lasso</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-lasso"
        ariaControlsPython="python-lasso"
        pythonCode=`${pythonRegData}

# REGRESIÓN LASSO
from sklearn.linear_model import Lasso

# Ajuste de la regresión lasso
model = Lasso(alpha=1.0)
model.fit(X, y)
    `
        dataTabsTargetR="#r-lasso"
        ariaControlsR="r-lasso"
        rCode=`${rRegData}

# Definición de predictores
X <- df_reg %>% select(c(size, age))
# Definición de variable target
y <- df_reg %>% select(price)

# REGRESIÓN LASSO
library(glmnet)

# Ajuste de la regresión lasso
model <- glmnet(X, y, alpha=1)
`
    />
</div>
<div id="decision-tree-reg" role="complementary" aria-labelledby="decision-tree-reg-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">Decision Tree Regresor</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-decision-tree-reg"
        ariaControlsPython="python-decision-tree-reg"
        pythonCode=`${pythonRegData}

# Decision Tree Regresor
from sklearn.tree import DecisionTreeRegressor

# Ajuste del árbol de decisión
model = DecisionTreeRegressor()
model.fit(X, y)
    `
        dataTabsTargetR="#r-decision-tree-reg"
        ariaControlsR="r-decision-tree-reg"
        rCode=`${rRegData}

# Decision Tree Regresor
library(rpart)

# Ajuste del árbol de decisión
model <- rpart(price ~ ., data = df_reg)
`
    />
</div>
<div id="random-forest-reg" role="complementary" aria-labelledby="random-forest-reg-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">Random Forest Regression</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-random-forest-reg"
        ariaControlsPython="python-random-forest-reg"
        pythonCode=`${pythonRegData}

# Random Forest Regression
from sklearn.ensemble import RandomForestRegressor

# Ajuste del random forest
model = RandomForestRegressor()
model.fit(X, y)
    `
        dataTabsTargetR="#r-random-forest-reg"
        ariaControlsR="r-random-forest-reg"
        rCode=`${rRegData}

# Random Forest Regression
library(randomForest)

# Ajuste del random forest
model <- randomForest(price ~ ., data = df_reg)
`
    />
</div>
<div id="sup-vect-reg" role="complementary" aria-labelledby="sup-vect-reg-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">Support Vector Regression</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-sup-vect-reg"
        ariaControlsPython="python-sup-vect-reg"
        pythonCode=`${pythonRegData}

# Support Vector Regression
from sklearn.svm import SVR

# Ajuste de las máquinas de soporte vectorial
model = SVR(kernel='rbf')
model.fit(X, y)
    `
        dataTabsTargetR="#r-sup-vect-reg"
        ariaControlsR="r-sup-vect-reg"
        rCode=`${rRegData}

# Support Vector Regression
library(e1071)

# Ajuste de las máquinas de soporte vectorial
model <- svm(price ~ ., data = df_reg, type='eps-regression')`
    />
</div>
<div id="xgb-reg" role="complementary" aria-labelledby="xgb-reg-tab" class="hidden flex-1 ml-1 px-1">
    <h2 class="py-10 text-3xl">XGB Regressor</h2>
    <CodeSnipet
        dataTabsTargetPython="#python-xgb-reg"
        ariaControlsPython="python-xgb-reg"
        pythonCode=`${pythonRegData}

# XGB REGRESSOR
from xgboost import XGBRegressor

# Ajuste de xgboost
model = XGBRegressor()
model.fit(X, y)
    `
        dataTabsTargetR="#r-xgb-reg"
        ariaControlsR="r-xgb-reg"
        rCode=`${rRegData}

# Definición de predictores
X <- df_reg %>% select(c(size, age))
X_matrix <- as.matrix(X)  # Convertir data.frame a matrix
# Definición de variable target
y <- df_reg %>% select(price)

# XGB REGRESSOR
library(xgboost)

# Ajuste delas máquinas de soporte vectorial
model <- xgboost(data = X_matrix, label = y, nrounds = 100, objective = "reg:squarederror")
`
    />
</div>